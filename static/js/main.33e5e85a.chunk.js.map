{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","className","concat","typ","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","togglemode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","SetText","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","dyy","ShowAlert","split","length","defaultProps","App","setmode","_useState3","_useState4","alert","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.33e5e85a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.Alert && (\r\n      <div\r\n        className={`alert alert-${props.Alert.typ} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.Alert.typ)}</strong>\r\n        {props.Alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import link from \"react-router-dom\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\"> */}\r\n            {/* <Link className=\"nav-link\" to=\"/about\"> */}\r\n            {/* {props.aboutText} */}\r\n            {/* About */}\r\n            {/* </Link> */}\r\n            {/* </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              onClick={props.togglemode}\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              enable dark mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = { title: PropTypes.string.isRequired };\r\n\r\nNavbar.defaultProps = { title: \"this is default prop\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const Dothis = () => {\r\n    const dyy = text.toUpperCase();\r\n    props.ShowAlert(\"converted to uppercase\", \"success\");\r\n    SetText(dyy);\r\n  };\r\n  const Dothis1 = () => {\r\n    const dyy = text.toLowerCase();\r\n    props.ShowAlert(\"converted to lowercase\", \"success\");\r\n\r\n    SetText(dyy);\r\n  };\r\n\r\n  const dothischange = (event) => {\r\n    SetText(event.target.value);\r\n  };\r\n\r\n  const [text, SetText] = useState(\"Enter text here\");\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n        className=\"container\"\r\n      >\r\n        <h1> {props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            value={text}\r\n            onChange={dothischange}\r\n            id=\"mybox\"\r\n            className=\"form-control\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button onClick={Dothis}>click to uppercase</button>\r\n        <button className=\"mx-2\" onClick={Dothis1}>\r\n          click to lowercase\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h2>text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} are words and {text.length} are characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes it take to read </p>\r\n        <h2>preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter text\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const ShowAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      typ: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const togglemode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#212559\";\n      ShowAlert(\"dark mode has been alert\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      ShowAlert(\"dark mode has been disabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {\" \"}\n      {/* <Router> */}\n      <Navbar title=\"Navbar\" mode={mode} togglemode={togglemode} />\n      <Alert Alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n        {/* <Route exact path=\"About\" element={<About />} /> */}\n        {/* <Route */}\n        {/* exact\n          path=\"/\"\n          element={ */}\n        <TextForm ShowAlert={ShowAlert} heading=\"enter the text\" mode={mode} />\n        {/* } */}\n        {/* /> */}\n        {/* </Routes> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}